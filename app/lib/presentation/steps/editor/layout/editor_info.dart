import 'package:flutter/material.dart' hide Step;
import 'package:flutter_bloc/flutter_bloc.dart';

import 'package:vision_director/application/steps/step_list/step_list_cubit.dart';
import 'package:vision_director/domain/common/media.dart';
import 'package:vision_director/domain/core/constants.dart';
import 'package:vision_director/domain/steps/step.dart';
import 'package:vision_director/presentation/common/step_widgets/icon_label.dart';
import 'package:vision_director/presentation/common/step_widgets/info_box_wrapper.dart';
import 'package:vision_director/presentation/common/utils/utils.dart';
import 'package:vision_director/presentation/core/app_colors.dart';

/// Displays info related to the current step.
class EditorInfo extends StatelessWidget {
  final Step? current;
  const EditorInfo({super.key, this.current});

  @override
  Widget build(BuildContext context) {
    return SizedBox(
      height: 130,
      child: Padding(
        padding: const EdgeInsets.all(15),
        child: Column(
          children: [
            const _TotalTimeLabel(),
            const Divider(thickness: 1),
            // Display the current step's infos
            if (current != null) _StepInfoBox(current: current!)
          ],
        ),
      ),
    );
  }
}

class _TotalTimeLabel extends StatelessWidget {
  const _TotalTimeLabel();

  @override
  Widget build(BuildContext context) {
    return Padding(
      padding: const EdgeInsets.all(5.0),
      child: Center(
        child: BlocBuilder<StepListCubit, StepListState>(
          builder: (context, state) => state.maybeWhen(
            loadSuccess: (steps) {
              // Sum up the duration of all steps
              final duration = steps.fold<int>(
                0,
                (p, c) => p + (c.duration.inSeconds),
              );
              return Text(
                "Total time: ${getDurationString(duration + Guidelines.autoGeneratedLength)} / ${getDurationString(Guidelines.maxTotalDuration)}",
                style: TextStyle(
                  fontWeight: FontWeight.bold,
                  color: duration > Guidelines.maxTotalDuration
                      ? ThemeColors.brandRed
                      : Colors.white,
                  fontSize: 16,
                ),
              );
            },
            orElse: () => Container(),
          ),
        ),
      ),
    );
  }
}

class _StepInfoBox extends StatelessWidget {
  final Step current;
  const _StepInfoBox({required this.current});

  @override
  Widget build(BuildContext context) {
    return InfoBoxWrapper(
      children: [
        IconLabel(
          icon: _getMediaIcon(current.media),
          isSet: current.media != null,
          label: _getMediaLabel(current.media),
        ),
        IconLabel(
          icon: Icons.description,
          isSet: current.annotation != null,
          label: "Annotation",
        ),
        IconLabel(
          icon: Icons.audiotrack,
          isSet: current.audio != null,
          label: "Audio",
        ),
        IconLabel(
          icon: Icons.person,
          isSet: current.assignee != null,
          label: "Assigned",
        ),
      ],
    );
  }

  IconData _getMediaIcon(Media? media) {
    if (media == null) return Icons.attach_file;
    final mimeType = media.mimeType;
    if (mimeType.contains("video")) return Icons.video_collection_rounded;
    if (mimeType.contains("image")) return Icons.image;
    return Icons.question_mark;
  }

  String _getMediaLabel(Media? media) {
    if (media == null) return "Media";
    final mimeType = media.mimeType;
    if (mimeType.contains("video")) return "Video";
    if (mimeType.contains("image")) return "Image";
    return "Unknown";
  }
}
